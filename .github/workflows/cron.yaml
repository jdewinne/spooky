name: cron

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '30 5,17 * * *'
  workflow_dispatch:

jobs:
  push-to-replicated:
    runs-on: ubuntu-22.04
    outputs:
      channel-slug: ${{ steps.create-release.outputs.channel-slug}}
      release-sequence: ${{ steps.create-release.outputs.release-sequence}}
    steps:
      - uses: actions/checkout@v3

      - name: Define App Version
        run: echo "APP_VERSION=0.0.1-${GITHUB_REF_NAME//[^a-zA-Z0-9]/}.${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Define Channel Name
        run: echo "CHANNEL_NAME=${{ github.ref_name }}-${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Package Helm Chart for Replicated
        id: package-helm-chart
        run: |
          helm package spooky-app -u -d kots \
            --app-version=${{ env.APP_VERSION }} \
            --version=${{ env.APP_VERSION }}

      - name: Update the HelmChart kind
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          include: 'kots/spooky-app-chart.yaml'
          find: '$VERSION'
          replace: '${{ env.APP_VERSION }}'
          regex: false

      - name: Create Replicated Release
        id: create-release
        uses: replicatedhq/compatibility-actions/create-release@v0
        with:
          app-slug: ${{ secrets.REPLICATED_APP }}
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          yaml-dir: ./kots
          promote-channel: ${{ env.CHANNEL_NAME }}
          version: ${{ env.APP_VERSION }}

  compatibility-matrix:
    needs: push-to-replicated
    strategy:
      fail-fast: false
      matrix:
        cluster: [{distribution: kind, version: v1.25.3}, {distribution: k3s, version: v1.26}]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Define App Version
        run: echo "APP_VERSION=0.0.1-${GITHUB_REF_NAME//[^a-zA-Z0-9]/}.${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Create Customer 
        id: create-customer
        uses: replicatedhq/compatibility-actions/create-customer@v0
        with:
          app-slug: ${{ secrets.REPLICATED_APP }}
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          customer-name: ${{ github.ref_name }}-${{ matrix.cluster.distribution }}-${{ matrix.cluster.version }}
          channel-slug: ${{ needs.push-to-replicated.outputs.channel-slug }}
          customer-email: ${{ github.ref_name }}@example.com
          license-type: paid

      - name: Create Cluster
        id: create-cluster
        uses: replicatedhq/compatibility-actions/create-cluster@v0
        with:
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          kubernetes-distribution: ${{ matrix.cluster.distribution }}
          kubernetes-version: ${{ matrix.cluster.version }}
          cluster-name: ${{ github.ref_name }}-${{ matrix.cluster.distribution }}-${{ matrix.cluster.version }}
          timeout-minutes: 20
          ttl: 30m

      - name: Deploy the app
        uses: replicatedhq/compatibility-actions/kots-install@v0
        with:
          kubeconfig: ${{ steps.create-cluster.outputs.cluster-kubeconfig }}
          app-slug: ${{ secrets.REPLICATED_APP }}/${{ needs.push-to-replicated.outputs.channel-slug }}
          license-file: ${{ steps.create-customer.outputs.license-file }}
          app-version-label: ${{ env.APP_VERSION }}

      - name: Run a test
        # mask the kubeconfig so it doesn't show up in the logs
        run: |
          echo "Running a test"
          echo "${{ steps.create-cluster.outputs.cluster-kubeconfig }}" > kubeconfig.yaml
          sleep 60
          kubectl port-forward svc/spooky-app --pod-running-timeout=2m --kubeconfig='./kubeconfig.yaml' 8080:80 &
          sleep 120
          curl -f http://localhost:8080
          echo "Test complete"

      - name: Remove Cluster
        id: remove-cluster
        if: always()
        uses: replicatedhq/compatibility-actions/remove-cluster@v0
        continue-on-error: true # It could be that the cluster is already removed
        with:
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          cluster-id: ${{ steps.create-cluster.outputs.cluster-id }}

      - name: Archive Customer
        id: archive-customer
        if: always()
        uses: replicatedhq/compatibility-actions/archive-customer@v0
        with:
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          customer-id:  ${{ steps.create-customer.outputs.customer-id }}

  cleanup-channel:
    needs:
      - compatibility-matrix
      - push-to-replicated
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      
      - name: Archive Replicated Channel
        uses: replicatedhq/compatibility-actions/archive-channel@v0
        if: always()
        with:
          app-slug: ${{ secrets.REPLICATED_APP }}
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          channel-slug: ${{ needs.push-to-replicated.outputs.channel-slug }}    
          
